/**
 * Bundle of @livelybone/mouse-events
 * Generated: 2020-05-16
 * Version: 1.0.0
 * License: MIT
 * Author: 2631541504@qq.com
 */

import { isMobile } from 'is-mobile';
import * as MouseWheel from '@livelybone/mouse-wheel';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var $isMobile = isMobile();
var prefix = '';
var $addEventListener = 'addEventListener';
var $removeEventListener = 'removeEventListener';

if (typeof window !== 'undefined' && typeof document !== 'undefined') {
  // detect event model
  if ('addEventListener' in window) {
    $addEventListener = 'addEventListener';
    $removeEventListener = 'removeEventListener';
  } else {
    $addEventListener = 'attachEvent';
    $removeEventListener = 'detachEvent';
    prefix = 'on';
  }
}

function $addListener(element, eventName, listener, useCapture) {
  var eName = prefix + eventName;
  var addListener = element[$addEventListener].bind(element);
  addListener(eName, listener, useCapture);
  return function () {
    var removeListener = element[$removeEventListener].bind(element);
    removeListener(eName, listener, useCapture);
  };
}

var Utils = /*#__PURE__*/Object.freeze({
  $isMobile: $isMobile,
  $addListener: $addListener
});

var client = $isMobile ? 'mobile' : 'pc';
var EventType = {
  start: {
    pc: 'mousedown',
    mobile: 'touchstart'
  }[client],
  move: {
    pc: 'mousemove',
    mobile: 'touchmove'
  }[client],
  end: {
    pc: 'mouseup',
    mobile: 'touchend'
  }[client]
};

function getClientPos(ev) {
  var touch = null;

  if ($isMobile) {
    if (ev.changedTouches.length > 0) {

      var _ev$changedTouches = _slicedToArray(ev.changedTouches, 1);

      touch = _ev$changedTouches[0];
    } else if (ev.targetTouched.length > 0) {

      var _ev$changedTouches2 = _slicedToArray(ev.changedTouches, 1);

      touch = _ev$changedTouches2[0];
    } else {

      var _ev$touches = _slicedToArray(ev.touches, 1);

      touch = _ev$touches[0];
    }
  }

  return touch || ev;
}

function getEvent(ev, startEvent) {
  return {
    deltaX: getClientPos(ev).clientX - getClientPos(startEvent).clientX,
    deltaY: getClientPos(ev).clientY - getClientPos(startEvent).clientY,
    originalEvent: ev
  };
}

function bind(element, listener, useCapture) {
  if (typeof element === 'function') {
    /* eslint-disable no-param-reassign */
    useCapture = listener;
    listener = element;
    element = window;
  }

  var startEvent;
  var unbindFn;

  function $listener(ev) {
    var event = {
      deltaX: 0,
      deltaY: 0,
      originalEvent: ev,
      type: 'dragMoveStart'
    };

    if (ev.type === EventType.start) {
      startEvent = ev;
      var unbindMove = $addListener(window, EventType.move, $listener, useCapture);
      var unbindEnd = $addListener(window, EventType.end, $listener, useCapture);

      unbindFn = function unbindFn() {
        unbindMove();
        unbindEnd();
      };
    } else if (ev.type === EventType.move) {
      event = _objectSpread2(_objectSpread2({}, getEvent(ev, startEvent)), {}, {
        type: 'dragMove'
      });
    } else if (ev.type === EventType.end) {
      event = _objectSpread2(_objectSpread2({}, getEvent(ev, startEvent)), {}, {
        type: 'dragMoveEnd'
      });
      if (unbindFn) unbindFn();
    }

    listener(event);
  }

  return $addListener(element, EventType.start, $listener, useCapture);
}

var DragMove = /*#__PURE__*/Object.freeze({
  bind: bind
});

export { DragMove, MouseWheel, Utils };
